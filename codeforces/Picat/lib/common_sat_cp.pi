module common_sat_cp.

/************************************************************************* 
    regular(L,Q,S,M,Q0,Fs)

  L : A sentence (an IntVar array or list)
  Q : number of states
  S : input_max, inputs are from 1 to S
  M : transition matrix (the entry M[I,J] is a list of outgoing states for NFA)
  Q0: initial state
  Fs : accepting states

  This is a translation of MiniZinc's regular constraint (defined in
  lib/zinc/globals.mzn), via the Comet code refered above.
  by Hakan Kjellerstrand, 2014, improved by N.F. Zhou

  The following comments are adapted from the MiniZinc code:

  regular(array[int] of var int: L, int: Q, int: S, array[int,int] of int: M, int: Q0, set of int: F)
  The sequence of values in array L (which must all be in the range 1..S)
  is accepted by the FA of Q states with input 1..S and transition
  M (which maps (1..Q, 1..S) -> 0..Q)) and initial state Q0
  (which must be in 1..Q) and accepting states 'Fs' (which all must be in
  1..Q).  State 0 is reserved for the failing state.
***************************************************************************/
regular(L,Q,S,M,Q0,Fs,Solver) =>
    % If L has index set 1..n-1, then A[1] holds the initial state
    % (Q0), and A[i+1] holds the state we're in after  processing
    % L[i].  If A[n] is in Fs, then we succeed (ie. accept the string).
	(list(L) -> Seq = L;  array(L) -> Seq = to_list(L); handle_exception($list_expected(L),regular)),
    N2 = L.length+1,
    StateVect = new_array(N2),   % states
    bp.domain(StateVect.to_list(),1,Q),
    bp.domain(Seq,1,S),                   % Do this in case it's a var.

    StateVect[1] = Q0,           % initial state
    (list(M) ->bp.list_matrix_to_array_matrix(M,Matrix); Matrix=M),
    (cp_check_matrix(Matrix,Q,S) -> true; handle_exception($invalid_matrix(M),regular)),
    (ground(Matrix) -> true; handle_exception($non_ground_matrix(M),regular)),
    FinState = StateVect[N2],
    (ground(Fs) -> FsIsGround = 1; FsIsGround = 0),
	(array(Fs) -> FsList = to_list(Fs); FsList=Fs),

	(FsIsGround==1 ->
	     bp.'::'(FinState,FsList)   % BP's built-in '::'/2.
	;
	    (Solver==cp -> bp.element(_,FsList,FinState); bp.'$element'(_,FsList,FinState))
	),

    (integer(Q0),FsIsGround==1 -> preprocess_regular(Q,S,Matrix,Q0,FsList,StateVect); true),

    post_matrix_element(Seq,1,Matrix,Q,S,StateVect,Solver),
    
     if Solver==cp then 
         bp.wait_to_check_regular(Matrix,Q0,FsList,Seq)      % needed for NFA
     end.  

cp_check_matrix(M,NRows,NCols) =>
    NRows = M.length,
    NCols = M[1].length,
    foreach(R in 2..NRows) 
        M[R].length==NCols 
    end.

post_matrix_element([],_I,_Matrix,_NRows,_NCols,_StateVect,_Solver) => true.
post_matrix_element([E|L],I,Matrix,NRows,NCols,StateVect,Solver) =>
	I1 is I+1,
    matrix_element(Matrix,NRows,NCols,StateVect[I],E,StateVect[I1],Solver),
	post_matrix_element(L,I1,Matrix,NRows,NCols,StateVect,Solver).

% Here is MiniZinc's infamous matrix element
%     a[i+1] = d[a[i], x[i]]
matrix_element(M,NRows,NCols,I,J,MIJ,Solver) =>
    bp.domain(I,1,NRows),
    bp.domain(J,1,NCols),
    Table = [],
    foreach(R in NRows..-1..1, C in NCols..-1..1)
	    if bp.b_DM_TRUE_cc(I,R) && bp.b_DM_TRUE_cc(J,C) then
            Entry = M[R,C],
        	(list(Entry) ->
                foreach(E in Entry, bp.b_DM_TRUE_cc(MIJ,E))
                    Table := [{R,C,E}|Table]
              	end
        	;Entry!==0, bp.b_DM_TRUE_cc(MIJ,Entry) ->
                Table := [{R,C,Entry}|Table]
        	;
                true
        	)
		end
    end,
    VarTuple = {I,J,MIJ},
% writeln(Table),
    (Solver==cp ->
        bp.table_in(VarTuple,Table)
    ;        
        bp.'$table_in'(VarTuple,Table)
    ).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% StateVect is a vector of state variables created for the automaton. For each 
% state variable StateVect[I] (I=1..N), a state cannot be a possible value if 
% it cannot be reached from Q0 in I-1 steps.
% A state cannot be a possible value either if it cannot reach a final state 
% in N-I steps, but this condition is not used (future work).
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
preprocess_regular(Q,S,Matrix,Q0,Fs,StateVect) =>
    N = length(StateVect),

    % Reach0[State,K] is 1 if State can be reached from Q0 in K steps
    Reach0 = new_array(Q,N),  
    reachable(Q0,0,N,S,Matrix,Reach0),           % forward from Q0

%	writeln(reach0), writeln(Reach0),
	transport_trans_matrix(Matrix,TMatrix),

    % Reach1[State,K] is 1 if State can be reached from a final state in K steps backward
    Reach1 = new_array(Q,N),  
	foreach (State in Fs)
         reachable(State,0,N,S,TMatrix,Reach1)   % backward from a final state
	end,
%	writeln(reach1), writeln(Reach1),
		    
    foreach (I in 2..N-1, State in 1..Q)
        (Reach0[State,I-1]==1, Reach1[State,N-I]==1 ->    % reachable from Q0 in I-1 steps and from F in N-I steps backward
            true                     
        ;
            bp.domain_set_false(StateVect[I],State)
        )
    end.
%	writeln($statevect(StateVect)).

transport_trans_matrix(Matrix,TMatrix) =>
    Q = Matrix.length, S = Matrix[1].length,
	TMatrix = new_array(Q,S),
	foreach (State in 1..Q, Input in 1..S)
	    TMatrix[State,Input] = 0
	end,
	foreach (State in 1..Q, Input in 1..S)
	    Entry = Matrix[State,Input],
%		printf("%d %d %w\n",State,Input,Entry),
		(list(Entry) ->
		    foreach (PreState in Entry)
			    TEntry = TMatrix[PreState,Input],
				(TEntry == 0 ->
				    TMatrix[PreState,Input] := State
				;integer(TEntry) ->
				    TMatrix[PreState,Input] := [State,TEntry]
				;   % TEntry is list
				    TMatrix[PreState,Input] := [State|TEntry]
				)
			end
		; Entry !== 0 ->
		    TEntry = TMatrix[Entry,Input],
		    (TEntry == 0 ->
		        TMatrix[Entry,Input] := State
			;integer(TEntry) ->
			    TMatrix[Entry,Input] := [State,TEntry]			
			;
			    TMatrix[Entry,Input] := [State|TEntry]
			)
		;
		    true
		)
	end.

% State is reachable from a given state in NSteps
/*
reachable(State,NSteps,_N,_S,_Matrix,_Reach) ?=>
    writeln($reachable(State,NSteps)),fail.
*/
reachable(_State,NSteps,N,_S,_Matrix,_Reach), NSteps>N => true.
reachable(State,NSteps,N,S,Matrix,Reach) =>
    if NSteps>0 then
	    Reached = Reach[State,NSteps]
    end,
	if var(Reached) then     % State hasn't been reached in NSteps before
	    Reached = 1,
		NSteps1 = NSteps+1,
   		foreach (Input in 1..S)
       	    Entry = Matrix[State,Input],
       		if list(Entry) then
           	    foreach (NextState in Entry)
               	    reachable(NextState,NSteps1,N,S,Matrix,Reach)
           		end
       		elseif Entry !== 0 then
           	    reachable(Entry,NSteps1,N,S,Matrix,Reach)
            end
   		end
    end.
			

    

