/* 
    Tentative implementation of part of the os module. 
    Not efficient. Needs to be redone later.
*/
module os.

% cd(Path) => cd(Path).
% chdir(Path) => chdir(Path).
% cp(SrcPath,DestPath) => cp(SrcPath,DestPath).
% cwd() = cwd().
% dir => dir.
% directory(Path) => directory(Path).
% env_exists(Name) => env_exists(Name).
% executable(Path) => executable(Path).
% exists(Path) => exists(Path).
% file(Path) => file(Path).
% file_base_name(Path) = file_base_name(Path).
% file_directory_name(Path) = file_directory_name(Path).
% file_exists(Path) => file_exists(Path).
% getenv(Name) = getenv(Name).
% listdir(Path) = listdir(Path).
% ls => ls.
% mkdir(Path) => mkdir(Path).
% pwd() = pwd().
% readable(Path) => readable(Path).
% rename(Path1,Path2) => rename(Path1,Path2).
% rm(Path) => rm(Path).
% rmdir(Path) => rmdir(Path).
% separator() = separator().
% size(Path) = size(Path).
% writable(Path) => writable(Path).


% chdir(Path) => chdir(Path).
chdir(String) => cd(String).

% cd(Path) => cd(Path).
cd(Atom), atom(Atom) =>
    bp.cd(Atom).    
cd(String), string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.cd(Atom).
cd(String) =>
    handle_exception($string_expected(String),cd).

% cp(Path1,Path2) => cp(Path1,Path2).
cp(Atom1,Atom2),
    atom(Atom1),
    atom(Atom2)
=>
    picat_copy_file(Atom1.to_string(),Atom2.to_string()).
cp(String1,String2),
    string(String1),
    string(String2)
=>
    picat_copy_file(String1,String2).
cp(String1,String2) =>
    Source = $cp(String1,String2),
    (string(String1) ->
	    handle_exception($string_expected(String2),Source)
    ;
		handle_exception($string_expected(String1),Source)
    ).

picat_copy_file(Path1,_Path2),directory(Path1) =>
    handle_exception($file_expected(Path1),cp).    
picat_copy_file(Path1,Path2),directory(Path2) =>
    ((append(PrePath2,"/",Path2);append(PrePath2,"\\",Path2)) -> true; PrePath2 = Path2),  % trim trailing "/" or "\\"
    ((member(Separator,['/','\\']),append(_,[Separator|MainFile1],Path1), not member('\\',MainFile1), not member('/',MainFile1)) ->
	    true
	;
		MainFile1=Path1
	),
	picat_copy_file_aux(Path1,PrePath2++[separator()]++MainFile1).
picat_copy_file(Path1,Path2) =>
    picat_copy_file_aux(Path1,Path2).

picat_copy_file_aux(Path,Path) => true. % can't copy onto itself
picat_copy_file_aux(Path1,Path2) =>
    FDr = open(Path1),
    FDw = open(Path2,write),
	bp.picat_get_out_fdindex(FDw,OutIndex),
    bp.picat_get_in_fdindex(FDr,InIndex),
	bp.c_CP_FILE_cc(InIndex,OutIndex),
	FDr.close(),
	FDw.close().

% cwd() = cwd().
cwd() = Path =>
    bp.get_cwd(Dir),
    Path = to_string(Dir).

% dir => dir.
dir =>
    bp.c_OS_TYPE_f(OS),
    (OS==windows -> bp.dir; bp.ls).

% directory(Path) => directory(Path).
directory(Atom),atom(Atom) =>
    bp.exists(Atom),
    bp.c_file_type(Atom,Type),
    Type==directory.
directory(String),string(String) =>
    bp.picat_string_to_atom(String,Atom),    
    bp.exists(Atom),
    bp.c_file_type(Atom,Type),
    Type==directory.
directory(String) =>
    handle_exception($string_expected(String),directory).

% file(Path) => file(Path).
file(Atom),atom(Atom) =>
    bp.exists(Atom),
    bp.c_file_type(Atom,Type),
    Type==regular.
file(String),string(String) =>
    bp.picat_string_to_atom(String,Atom),    
    bp.exists(Atom),
    bp.c_file_type(Atom,Type),
    Type==regular.
file(String) =>
    handle_exception($string_expected(String),file).

% file_base_name(Path) = file_base_name(Path).
file_base_name(Atom) = Name, atom(Atom) =>
    to_string(Atom) = String,
    file_base_name(String) = Name.
file_base_name(String) = Name, string(String) =>
    ((append(_,['/'|Base],String),not member('/',Base),not member('\\',Base))->
	Name=Base
    ; (append(_,['\\'|Base],String),not member('/',Base),not member('\\',Base))->
        Name=Base
    ;
        Name=String
    ).
file_base_name(String) = _Name =>
    handle_exception($string_expected(String),file_base_name).    
    

% file_directory_name(Path) = file_directory_name(Path).
file_directory_name(Atom) = Name, atom(Atom) =>
    to_string(Atom) = String,
    file_directory_name(String) = Name.
file_directory_name(String) = Name, string(String) =>
    ((append(Pre,['/'|Base],String),not member('/',Base),not member('\\',Base))->
	Name=Pre
    ; (append(Pre,['\\'|Base],String),not member('/',Base),not member('\\',Base))->
        Name=Pre
    ;
        Name="."
    ).
file_directory_name(String) = _Name =>
    handle_exception($string_expected(String),file_directory_name).    

% file_exists(Path) => file_exists(Path).
file_exists(Atom),atom(Atom) =>
    bp.file_exists(Atom).
file_exists(String),string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.file_exists(Atom).
file_exists(String) =>
    handle_exception($string_expected(String),file_exists).

% env_exists(Name) => env_exists(Name).
env_exists(Atom),atom(Atom) =>
    bp.picat_getenv(Atom,_).
env_exists(String),string(String) =>
    bp.picat_string_to_atom(String,Atom),    
    bp.picat_getenv(Atom,_).

% getenv(Name) = getenv(Name).
getenv(Atom)=Paths,atom(Atom) =>
    (bp.picat_getenv(Atom,Paths) -> true; handle_exception($no_environment_var(Atom),getenv)).
getenv(String)=Paths,string(String) =>
    bp.picat_string_to_atom(String,Atom),    
    (bp.picat_getenv(Atom,Paths) -> true; handle_exception($no_environment_var(String),getenv)).
getenv(String)=_Paths =>
    handle_exception($string_expected(String),getenv).    

% executable(Path) => executable(Path).
executable(Atom), atom(Atom) =>
    bp.exists(Atom),
    bp.file_property(Atom,$permission(execute)).
executable(String), string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.exists(Atom),
    bp.file_property(Atom,$permission(execute)).
executable(String) =>
    handle_exception($string_expected(String),executable).

% exists(Path) => exists(Path).
exists(Atom),atom(Atom) =>
    bp.exists(Atom).
exists(String),string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.exists(Atom).
exists(String) =>
    handle_exception($string_expected(String),exists).

% listdir(Path) = listdir(Path).
listdir(Atom)=List, atom(Atom) => 
    picat_listdir(Atom,List).
listdir(String)=List, string(String) => 
    bp.picat_string_to_atom(String,Atom),
    picat_listdir(Atom,List).
listdir(String)=_List =>
    handle_exception($string_expected(String),listdir).

picat_listdir(Atom,List),directory(Atom) =>
    bp.directory_files(Atom,AList),
    List=[to_string(E) : E in AList].
picat_listdir(Atom,_List) =>
    handle_exception($directory_expected(Atom),listdir).    

% ls => ls.
ls =>
    dir.

% mkdir(Path) => mkdir(Path).
mkdir(Atom), atom(Atom) => 
    bp.make_directory(Atom).
mkdir(String), string(String) => 
    bp.picat_string_to_atom(String,Atom),
    bp.make_directory(Atom).
mkdir(String) =>
    handle_exception($string_expected(String),mkdir).

% pwd() = pwd().
pwd() = Path =>
    bp.get_cwd(Dir),
    Path = to_string(Dir).

% rename(Path1,Path2) => rename(Path1,Path2).
rename(Atom1,Atom2),
    atom(Atom1),
    atom(Atom2)
=>
    bp.rename_file(Atom1,Atom2).
rename(String1,String2),
    string(String1),
    string(String2)
=>
    bp.picat_string_to_atom(String1,Atom1),
    bp.picat_string_to_atom(String2,Atom2),
    bp.rename_file(Atom1,Atom2).
rename(String1,String2) =>
    Source = $rename(String1,String2),
    (string(String1) ->
	handle_exception($string_expected(String2),Source)
    ;
	handle_exception($string_expected(String1),Source)
    ).

% readable(Path) => readable(Path).
readable(Atom), atom(Atom) =>
    bp.exists(Atom),
    bp.file_property(Atom,$permission(read)).
readable(String), string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.exists(Atom),
    bp.file_property(Atom,$permission(read)).
readable(String) =>
    handle_exception($string_expected(String),readable).

% rm(Path) => rm(Path).
rm(Atom), atom(Atom) =>
    picat_delete_file(Atom).
rm(String), string(String) =>
    bp.picat_string_to_atom(String,Atom),
    picat_delete_file(Atom).
rm(String) =>
    handle_exception($string_expected(String),rm).    
    
picat_delete_file(Name) =>
    (file(Name)->true; handle_exception($file_expected(Name),rm)),
    (bp.delete_file(Name) -> true;  handle_exception($file_not_deleted(Name),rm)).
	
% rmdir(Path) => rmdir(Path).
rmdir(Atom), atom(Atom) =>
    picat_delete_directory(Atom).
rmdir(String), string(String) =>
    bp.picat_string_to_atom(String,Atom),
    picat_delete_directory(Atom).
rmdir(String) =>
    handle_exception($string_expected(String),rmdir).    

picat_delete_directory(Name) =>
    (bp.delete_directory(Name) -> true; handle_exception($dir_not_deleted(Name),rmdir)).

% separator() = separator().
separator() = Char =>
    bp.c_OS_TYPE_f(OS),
    (OS==windows -> Char='\\'; Char='/').

% size(Path) = size(Path). size/1 is defined in basic, so must be module qualified as os.size(File).
size(Atom) = Size, atom(Atom) =>
    bp.file_property(Atom,$size(Size)).
size(String) = Size, string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.file_property(Atom,$size(Size)).
size(String) = _ =>
    handle_exception($string_expected(String),size).

% writable(Path) => writable(Path).
writable(Atom), atom(Atom) =>
    bp.exists(Atom),
    bp.file_property(Atom,$permission(write)).
writable(String), string(String) =>
    bp.picat_string_to_atom(String,Atom),
    bp.exists(Atom),
    bp.picat_string_to_atom(String,Atom),
    bp.file_property(Atom,$permission(write)).
writable(String) => 
    handle_exception($string_expected(String),writable).
    
