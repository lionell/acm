module sat.
import common_sat_cp.

% '#!='(X,Y) =>  X #!= Y.
% '#/\\'(X,Y) =>  X #/\ Y.
% '#<'(X,Y) =>  X #< Y.
% '#<='(X,Y) =>  X #=< Y.
% '#<=>'(X,Y) =>  X #<=> Y.
% '#='(X,Y) => X #= Y.
% '#=<'(X,Y) =>  X #=< Y.
% '#=>'(X,Y) =>  X #=> Y.
% '#>'(X,Y) =>  X #> Y.
% '#>='(X,Y) =>  X #>= Y.
% '#\\/'(X,Y) =>  X #\/ Y.
% '#^'(X,Y) =>  X #^ Y.
% '#~'(X) =>  #~ X.
%  '::'(Vars,Domain) => '::'(Vars,Domain).
% all_different(FDVars) => all_different(FDVars).
% all_distinct(FDVars) => all_distinct(FDVars).
% assignment(FDVars1,FDVars2) => assignment(FDVars1,FDVars2).
% circuit(L) => circuit(L).
% count(V,FDVars,Rel,N) => count(V,FDVars,Rel,N).
% cumulative(Starts,Durations,Resources,Limit) => cumulative(Starts,Durations,Resources,Limit).
% diffn(RectangleList) => diffn(RectangleList).
% element(I,FDVars,V) => element(I,FDVars,V).
% fd_disjoint(DVar1,DVar2) => fd_disjoint(DVar1,DVar2).
% fd_dom(FDVar) = fd_dom(FDVar).
% fd_false(FDVar,Elm) => fd_false(FDVar,Elm).
% fd_max(FDVar) = fd_max(FDVar).
% fd_min(FDVar) = fd_min(FDVar).
% fd_min_max(FDVar,Min,Max) => fd_min_max(FDVar,Min,Max).
% fd_next(FDVar,Elm) = fd_next(FDVar,Elm).
% fd_prev(FDVar,Elm) = fd_prev(FDVar,Elm).
% fd_size(FDVar) = fd_size(FDVar).
% fd_true(FDVar,Elm) => fd_true(FDVar,Elm).
% fd_vector_min_max(Min,Max) => fd_vector_min_max(Min,Max).
% global_cardinality(FDVars,Pairs) => global_cardinality(FDVars,Pairs).
% lex_lt(L1,L2) = > lex_lt(L1,L2).
% lex_le(L1,L2) = > lex_le(L1,L2).
% new_dvar() = new_dvar().
% new_fd_var() = new_fd_var().
% notin(VarOrVars,D) => notin(VarOrVars,D).
% regular(L, Q, S, M, Q0, Fs) => regular(L, Q, S, M, Q0, Fs).
% serialized(Starts,Durations) => serialized(Starts,Durations).
% solve(Options,Vars) => solve(Options,Vars)
% solve(Vars) => solve(Vars).
% solve_all(Vars) = solve_all(Vars).
% solve_all(Options,Vars) = solve_all(Options,Vars).
% table_in(Vars, Tuples) => table_in(Vars, Tuples).
% table_notin(Vars, Tuples) => table_notin(Vars, Tuples).

'::'(Vars,Domain) =>
    bp.'_$_picat_in'(Vars,Domain).

% '#='(X,Y) => X #= Y.
'#='(X,Y) => bp.'$='(X,Y).

% '#>='(X,Y) =>  X #>= Y.
'#>='(X,Y) => bp.'$>='(X,Y).

% '#>'(X,Y) =>  X #> Y.
'#>'(X,Y) => bp.'$>'(X,Y).

% '#<'(X,Y) =>  X #< Y.
'#<'(X,Y) => bp.'$<'(X,Y).

% '#=<'(X,Y) =>  X #=< Y.
'#=<'(X,Y) => bp.'$=<'(X,Y).

% '#!='(X,Y) =>  X #!= Y.
'#!='(X,Y) => bp.'$\\='(X,Y).

'#\\='(X,Y) => bp.'$\\='(X,Y).

% '#<=>'(X,Y) =>  X #<=> Y.
'#<=>'(X,Y) => bp.'$<=>'(X,Y).

% '#=>'(X,Y) =>  X #=> Y.
'#=>'(X,Y) => bp.'$=>'(X,Y).

% '#/\\'(X,Y) =>  X #/\ Y.
'#/\\'(X,Y) => bp.'$/\\'(X,Y).

% '#\\/'(X,Y) =>  X #\/ Y.
'#\\/'(X,Y) => bp.'$\\/'(X,Y).

% '#^'(X,Y) =>  X #^ Y.
'#^'(X,Y) => bp.'$\\'(X,Y).

% '#~'(X) =>  #~ X.
'#~'(X) => bp.'$\\'(X).

% all_different(FDVars) => all_different(FDVars).
all_different(FDVars) =>
    (array(FDVars) -> to_list(FDVars)=List; List=FDVars),
    bp.'$alldifferent'(List).

% all_distinct(FDVars) => all_distinct(FDVars).
all_distinct(FDVars) =>
    all_different(FDVars).

% element(I,FDVars,V) => element(I,FDVars,V).
element(I,FDVars,V) =>
    (array(FDVars) -> to_list(FDVars)=List; List=FDVars),
    (bp.dvar_or_int_list(List) -> true; handle_exception($dvar_or_int_list_expected(List),element)),
    bp.'$element'(I,List,V).

% fd_disjoint(DVar1,DVar2) => fd_disjoint(DVar1,DVar2).
fd_disjoint(DVar1,DVar2),dvar_or_int(DVar1),dvar_or_int(DVar2) => bp.b_DM_DISJOINT_cc(DVar1,DVar2).
fd_disjoint(DVar1,DVar2) =>
    Source=fd_disjoint,
    (dvar_or_int(DVar1) -> handle_exception($dvar_expected(DVar2),Source);handle_exception($dvar_expected(DVar1),Source)).

% count(V,FDVars,Rel,N) => count(V,FDVars,Rel,N).
count(V,FDVars,Rel,N) =>
    (array(FDVars) -> to_list(FDVars)=List; List=FDVars),
    Total #= sum([B : Elm in List, B#<=>(V #= Elm)]),
    count_aux(Total,Rel,N).

count_aux(Total,'#=',N) => Total #= N.
count_aux(Total,'#!=',N) => Total #!= N.
count_aux(Total,'#\\=',N) => Total #!= N.
count_aux(Total,'#>',N) => Total #> N.
count_aux(Total,'#>=',N) => Total #>= N.
count_aux(Total,'#<',N) => Total #< N.
count_aux(Total,'#=<',N) => Total #=< N.
count_aux(Total,'#<=',N) => Total #<= N.

% cumulative(Starts,Durations,Resources,Limit) => cumulative(Starts,Durations,Resources,Limit).
cumulative(Starts,Durations,Resources,Limit) =>
    (array(Starts) -> to_list(Starts)=SList; SList=Starts),    
    (array(Durations) -> to_list(Durations)=DList; DList=Durations),    
    (array(Resources) -> to_list(Resources)=RList; RList=Resources),
    bp.bp_cumulative(SList,DList,RList,Limit,sat).
    
% diffn(RectangleList) => diffn(RectangleList).
diffn(RectangleList) =>
    (array(RectangleList) -> to_list(RectangleList)=RList; RList=RectangleList),
    bp.bp_diffn(RList,sat).

% assignment(FDVars1,FDVars2) => assignment(FDVars1,FDVars2).
assignment(FDVars1,FDVars2) =>
    bp.picat_preprocess_assignment(FDVars1,FDVars2,Vect1,Vect2,N),
    foreach(I in 1..N, J in 1..N)
        (Vect1[I] #= J) #<=> (Vect2[J] #= I)
    end.

% solve(Vars) => solve(Vars).
solve(Vars) => solve([],Vars).

% solve(Options,Vars) => solve(Options,Vars)
solve(Options,Vars) =>
    (bp.dvar_or_int_list(Vars) -> VList = Vars; vars(Vars) = VList),
    (select($report(Call),Options,Options1) ->
	    Options2 = [$report('$dyna_eval_pred'(['$picat_top_level'],Call))|Options1]
    ;
		Options2 = Options
    ),
	(select($dump(File),Options2,Options3) ->
	    AtomFile = to_atom(File),
		Options4 = [$dump(AtomFile)|Options3]
	;		 
	    Options4 = Options2
	),	    
    bp.sat_solve(Options4,VList).    

solve_all(Vars) = solve_all([],Vars).

solve_all(Options,Vars) =
    findall(Vars,solve(Options,Vars)).

%%%%%%%%%%%%%%%%%%%%%%%% common to cp and sat modules %%%%%%%%%%%%%%%%%%%%%%
% new_fd_var() = new_fd_var().
new_fd_var() = FDVar =>
    bp.fd_new_var(FDVar).

new_dvar() = FDVar =>
    bp.fd_new_var(FDVar).

%%
table_in(Vars,Tuples) =>
    bp.'$table_in'(Vars,Tuples).

%%
notin(Vars,Domain) =>
    bp.'_$_picat_notin'(Vars,Domain).

%%
table_notin(Vars,Tuples) =>
    bp.'$table_notin'(Vars,Tuples).

% fd_dom(FDVar) = fd_dom(FDVar).
fd_dom(FDVar) = List,integer(FDVar) => List=[FDVar].
fd_dom(FDVar) = List, dvar(FDVar) => bp.domain_min_max(FDVar,Min,Max),bp.fd_domain(FDVar,List,Min,Max).
fd_dom(FDVar) = _List => 
    handle_exception($dvar_expected(FDVar),fd_dom).

% fd_false(FDVar,Elm) => fd_false(FDVar,Elm).
fd_false(FDVar,Elm),
    dvar_or_int(FDVar),
    integer(Elm)
=>
    bp.b_DM_FALSE_cc(FDVar,Elm).
fd_false(FDVar,Elm) =>
    bp.expect_dvar_int(FDVar,Elm,fd_false).

% fd_max(FDVar) = fd_max(FDVar).
fd_max(FDVar) = Max => (dvar_or_int(FDVar)->bp.domain_min_max(FDVar,_,Max);handle_exception($dvar_expected(FDVar),fd_max)).

% fd_min(FDVar) = fd_min(FDVar).
fd_min(FDVar) = Min => (dvar_or_int(FDVar)->bp.domain_min_max(FDVar,Min,_);handle_exception($dvar_expected(FDVar),fd_min)).

% fd_min_max(FDVar,Min,Max) => fd_min_max(FDVar,Min,Max).
fd_min_max(FDVar,Min,Max) => 
    (dvar_or_int(FDVar)->
    bp.domain_min_max(FDVar,Min,Max)
    ;
        handle_exception($dvar_expected(FDVar),fd_min_max)
    ).

% fd_next(FDVar,Elm) = fd_next(FDVar,Elm).
fd_next(FDVar,Elm) = NextElm, 
    dvar(FDVar), integer(Elm) 
=>
    (bp.domain_next_inst(FDVar,Elm,NextElm) -> true; handle_exception(failed_function_call,fd_next)).
fd_next(FDVar,Elm) = _NextElm =>
    bp.expect_dvar_int(FDVar,Elm,fd_next).

% fd_prev(FDVar,Elm) = fd_prev(FDVar,Elm).
fd_prev(FDVar,Elm) = PrevElm,
    dvar(FDVar), integer(Elm) 
=>
    (bp.b_DM_PREV_ccf(FDVar,Elm,PrevElm) -> true; handle_exception(failed_function_call,fd_prev)).
fd_prev(FDVar,Elm) = _PrevElm =>
    bp.expect_dvar_int(FDVar,Elm,fd_prev).

% fd_size(FDVar) = fd_size(FDVar).
fd_size(FDVar) = Size =>
    (dvar(FDVar) -> 
        bp.b_DM_COUNT_cf(FDVar,Size)
    ;integer(FDVar) ->
        Size=1
    ;
        handle_exception($dvar_expected(FDVar),fd_size)
    ).
    
% fd_true(FDVar,Elm) => fd_true(FDVar,Elm).
fd_true(FDVar,Elm),
    dvar_or_int(FDVar),
    integer(Elm)
=>
    bp.b_DM_TRUE_cc(FDVar,Elm).
fd_true(FDVar,Elm) =>
    bp.expect_dvar_int(FDVar,Elm,fd_true).

fd_vector_min_max(Min,Max) =>
    bp.fd_vector_min_max(Min,Max).

/************************************************************************* 
circuit(L): L is a list of variables X1,X2,...,Xn. An assignment
{X1->a1,X2->a2,...,Xn->an} satisfies this constraint if it forms a Hamilton cycle. 
To be more specific, each variable has a different value and no sub-cycles can be 
formed.  For example, for the constraint circult([X1,X2,X3,X4]), 
[3,4,2,1] is a solution, but [2,1,4,3] is not because it contains sub-cycles.
*************************************************************************/
circuit(L),list(L) =>
    A = to_array(L),
    circuit_aux(A).
circuit(A),array(A) =>
    circuit_aux(A).
circuit(L) =>
    handle_exception($array_or_list_expected(L),circuit).

circuit_aux(A) =>
    N=length(A),
    A :: 1..N,
    all_different(A),
    foreach(I in 1..N) A[I] #!= I end,      % not reflexive
    %
    OrderArr = new_array(N),                % order the nodes, starting at 1, then A[1], ...
    OrderArr :: 1..N,
    OrderArr[1] = 1,                        % a circuit is a path that starts at 1 and ends at 1
    all_different(OrderArr),
    foreach(I in 1..N, J in 1..N, I!==J)
        A[I]#=J #=> (OrderArr[I]#=N #=> OrderArr[J]#=1) #/\ 
                    (OrderArr[I]#!=N #=> OrderArr[J]#=OrderArr[I]+1)
    end.

global_cardinality(List,Pairs) =>
    (bp.check_pairs(Pairs) -> true; handle_exception($pairs_expected(Pairs),global_cardinality)),
    foreach($Key-V in Pairs) 
         sum([B : E in List, B #<=> (E#=Key)]) #= V
    end.

% serialized(Starts,Durations) => serialized(Starts,Durations).
serialized(Starts,Durations) =>
    Len = Starts.length,
    Os = [1 : _ in 1..Len],
    cumulative(Starts,Durations,Os,1).

/************************************************************************* 
subcircuit(L):  L is a list or an array of variables X1,X2,...,Xn.
L forms a subcircuit where Xi = j (j \= i) means that j is the successor of i 
and Xi = i means that i is not in the circuit. No sub-cycles are allowed.
*************************************************************************/
subcircuit(L),list(L) =>
    subcircuit_aux(L,L.to_array()).
subcircuit(A),array(A) =>
    subcircuit_aux(A.to_list(),A).
subcircuit(L) =>
    handle_exception($array_or_list_expected(L),subcircuit).

subcircuit_aux(L,A) =>
    A.length = N,
    L :: 1..N,
    OrderL = new_list(N), OrderA = OrderL.to_array(),
    OrderL :: 1..N,
    FirstInL = new_list(N), FirstInA = FirstInL.to_array(),
    FirstInL :: 0..1,
    sum(FirstInL) #=< 1,  % only one can be the first, no one if the circuit is empty
    Card :: 0..N,
    all_different(L),
    all_different(OrderL),
    Card #= sum([B : I in 1..N, B #<=> (A[I] #!= I)]),  % size of the circuit
    (Card #> 0) #<=> (sum(FirstInL) #= 1),  
    foreach(I in 1..N)
        FirstInA[I] #=> (A[I] #!= I) #/\ (OrderA[I] #= 1),
        A[I] #= I #=> OrderA[I] #> Card,
        foreach(J in 1..N, J !== I)
            A[I] #= J #=> (OrderA[I] #= Card #=> OrderA[J] #= 1) #/\
                          (OrderA[I] #!= Card #=> OrderA[J] #= OrderA[I]+1)
        end
    end.                         

/************************************************************************* 
    regular(L,Q,S,M,Q0,Fs)

  L : A sentence (an IntVar array or list)
  Q : number of states
  S : input_max, inputs are from 1 to S
  M : transition matrix (the entry M[I,J] is a list of outgoing states for NFA)
  Q0: initial state
  F : accepting states
***************************************************************************/
regular(L, Q, S, M, Q0, Fs) =>
    regular(L, Q, S, M, Q0, Fs, sat).  % defined in "regular_constr.pi"

%%
%% lex_le(L1,L2): collection L1 is lexicographically less than or equal to L2
%%
lex_le(L1,L2),list(L1),list(L2) =>
    check_args_lex(L1,L2,L11,L22),
    lex_le_aux(L11,L22).
lex_le(L1,L2),array(L1),array(L2) =>
    check_args_lex(to_list(L1),to_list(L2),L11,L22),
    lex_le_aux(L11,L22).
lex_le(L1,L2) =>
    handle_exception($wrong_arguments(L1,L2),lex_le).

%%
%% lex_lt(L1,L2): collection L1 is lexicographically less than L2
%%
lex_lt(L1,L2),list(L1),list(L2) =>
    check_args_lex(L1,L2,L11,L22),
    lex_lt_aux(L11,L22).
lex_lt(L1,L2),array(L1),array(L2) =>
    check_args_lex(to_list(L1),to_list(L2),L11,L22),
    lex_lt_aux(L11,L22).
lex_lt(L1,L2) =>
    handle_exception($wrong_arguments(L1,L2),lex_lt).

check_args_lex(L1,L2,L11,L22) =>
    (bp.dvar_or_int_list(L1) -> true; handle_exception($dvar_list_expected(L1),lex)),
    (bp.dvar_or_int_list(L2) -> true; handle_exception($dvar_list_expected(L2),lex)),
    N1 = length(L1),
    N2 = length(L2),
    (N1==N2 ->
        L11 = L1, L22 = L2
    ;N1<N2 ->
        Min = min([fd_min(V) : V in L2]),
        Min1 = Min-1,
        L1Pad = [Min1 : _ in 1..N2-N1],
        L11 = L1++L1Pad, L22=L2
    ;
        Min = min([fd_min(V) : V in L1]),
        Min1 = Min-1,
        L2Pad = [Min1 : _ in 1..N1-N2],
        L11 = L1, L22 = L2++L2Pad
    ).

lex_le_aux([],_) => true.
lex_le_aux([X],[Y|_]) => X #=< Y.
lex_le_aux([X1,X2],[Y1,Y2|_]) => (X1 #< Y1) #\/ (X1 #= Y1 #/\ (X2 #=< Y2)).
lex_le_aux(L1,L2) =>
    N1 = length(L1),
    N2 = length(L2),
	(N1 > N2 ->
	    L11 = new_list(N2),
		once(append(L11,_,L1)),
		lex_lt_aux(L11,L2)
	;		
	    N = N1,
		A1 = to_array(L1),
    	A2 = to_array(L2),
    	ReifLexLE = new_array(N),
    	ReifLexLE :: 0..1,
    	ReifLexLE[N] #<=> (A1[N] #=< A2[N]),
    	foreach(I in 2..N-1)
            ReifLexLE[I] #<=> (A1[I] #< A2[I] #\/ ((A1[I] #= A2[I]) #/\ ReifLexLE[I+1]))
    		end,
    	A1[1] #< A2[1] #\/ ((A1[1] #= A2[1]) #/\ ReifLexLE[2])
	).

lex_lt_aux([],_) => true.
lex_lt_aux([X],[Y]) => X #< Y.
lex_lt_aux([X],[Y|_]) => X #=< Y.
lex_lt_aux([X1,X2],[Y1,Y2]) => (X1 #< Y1) #\/ (X1 #= Y1 #/\ (X2 #< Y2)).
lex_lt_aux([X1,X2],[Y1,Y2|_]) => (X1 #< Y1) #\/ (X1 #= Y1 #/\ (X2 #=< Y2)).
lex_lt_aux(L1,L2) =>
    N1 = length(L1),
	N2 = length(L2),
	(N1 >= N2 ->
	    N = N2,
		A1 = to_array(L1),
    	A2 = to_array(L2),
    	ReifLexLE = new_array(N),
    	ReifLexLE :: 0..1,
    	ReifLexLE[N] #<=> (A1[N] #< A2[N]),
    	foreach(I in 2..N-1)
            ReifLexLE[I] #<=> (A1[I] #< A2[I] #\/ ((A1[I] #= A2[I]) #/\ ReifLexLE[I+1]))
    	end,
    	A1[1] #< A2[1] #\/ ((A1[1] #= A2[1]) #/\ ReifLexLE[2])
	;
        L22 = new_list(N1),
        once(append(L22,_,L2)),
	    lex_le_aux(L1,L22)
	).

%%
nvalue(N,L) => bp.'$nvalue'(N,L).
